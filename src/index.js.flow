// @flow

import fs from 'fs-extra';
import path from 'path';
import minifier from 'html-minifier';

import {ApiParser} from './apiParser';
import {Renderer as TemplateRenderer} from './renderer';

/**
 * Main
 * @param {Object} options
 * @return {Promise}
 */
export default async (options: Object = {}) => {
    // Check options
    if (!options.input || options.input.length === 0) {
        throw new Error('No input file given.');
    }

    // Custom CSS
    if (options.css) {
        options.css = fs.readFileSync(options.css, 'utf8');
    }

    // Custom header
    if (options.header) {
        options.header = fs.readFileSync(options.header, 'utf8');
    }

    // Template
    options.template = options.template || path.join(__dirname, 'themes', 'default', 'default.njk');

    if (!options.template.endsWith('.njk')) {
        try {
            options.template = require.resolve('docprint-theme-' + options.template);
        } catch (err) {
            throw new Error('Could not load theme: ' + options.template);
        }
    }

    // Parse API Blueprint
    const parser = new ApiParser({
        drafter: {
            requireBlueprintName: true
        }
    });

    let result: Object = await parser.parse(options.input);

    // Render template
    const renderer = new TemplateRenderer(path.dirname(options.template), {
        trimBlocks: true
    });

    let output = await renderer.render(path.basename(options.template), {
        doc: result,
        groups: result.content.content,
        title: result.content.title,
        description: result.content.description,
        customCss: options.css,
        customHeader: options.header,
        dataStructures: result.dataStructures,
        languages: result.languages
    });

    // Minify HTML / CSS / JS
    if (options.minify === true) {
        output = minifier.minify(output, {
            minifyCSS: true,
            minifyJS: true
        });
    }

    // Save
    if (/\.\w+$/.test(options.output) === false) {
        options.output = path.join(options.output, 'index.html');
    }

    fs.outputFileSync(options.output, output);
};
