// @flow

import fs from 'fs-extra';
import path from 'path';
import less from 'less';
import nunjucks from 'nunjucks';

export class Renderer {

    options: Object = {};
    templatePath: string;
    env: Object;

    /**
     * Renderer
     * @param {string} templatePath Template root dir
     * @param {Object} options Nunjucks environment options
     */
    constructor(templatePath: string, options: Object = {}) {
        this.options = Object.assign({}, this.options, options);

        // Template base path
        this.templatePath = templatePath;

        // Nunjucks
        this.env = nunjucks.configure(templatePath, this.options);
    }

    /**
     * Render template
     * @param {string} file Template file (relative to template root)
     * @param {Object} context Template context
     * @return {Promise.string}
     */
    async render(file: string, context: Object = {}): Promise<string> {
        return new Promise((resolve, reject) => {
            // Add filters
            this._filterFind();
            this._filterIncludes();
            this._filterLess();
            this._filterHighlightUrl();

            // Render
            this.env.render(file, context, (err, output) => {
                if (err) {
                    reject(err);
                }

                resolve(output);
            });
        });
    }

    /**
     * Find property in object
     * @return {void}
     */
    _filterFind(): void {
        this.env.addFilter('find', (obj, property, value) => {
            if (!Array.isArray(obj)) {
                return;
            }

            return obj.find(o => o[property] === value);
        });
    }

    /**
     * Check if array or string includes needle
     * @return {void}
     */
    _filterIncludes(): void {
        this.env.addFilter('includes', (haystack, needle, position = 0) => {
            return haystack.includes(needle, position);
        });
    }

    /**
     * Parse LESS and return CSS
     * @return {void}
     */
    _filterLess(): void {
        this.env.addFilter('less', (file, cb) => {
            let filePath = path.resolve(this.templatePath, file);
            let code = fs.readFileSync(filePath, 'utf8');

            less.render(code, {
                paths: [
                    this.templatePath,
                    path.resolve(this.templatePath, path.dirname(file))
                ]
            }, (err, res) => {
                if (err) {
                    cb(err.toString());
                }

                cb(null, res.css);
            });
        }, true);
    }

    /**
     * Highlight URL parameters
     * @return {void}
     */
    _filterHighlightUrl(): void {
        this.env.addFilter('highlightUrl', url => {
            return url && url.replace(/({.+?})/g, '<span class="hljs-keyword">$1</span>');
        });
    }
}
